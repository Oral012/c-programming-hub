{
  "exercises": [
    {
      "id": 1,
      "title": "Point Distance",
      "topic": "structs",
      "difficulty": "easy",
      "points": 35,
      "description": "Create a struct called Point with x and y coordinates. Write a function findClosest that takes an array of points and a target point, then returns the closest point to the target.",
      "structDefinition": {
        "code": "typedef struct {\n    int x;\n    int y;\n} Point;\n\nPoint findClosest(Point points[], int size, Point target);",
        "language": "c"
      },
      "examples": [
        {
          "input": "Points: [(1,1), (3,4), (5,2)]\nTarget: (4,3)",
          "output": "Closest point: (3,4)\nDistance: 1.41",
          "explanation": "Point (3,4) is closest to target (4,3)"
        }
      ],
      "hints": [
        "Use the distance formula: √((x2-x1)² + (y2-y1)²). You don't need the actual square root - just compare squared distances!"
      ],
      "solution": {
        "code": "Point findClosest(Point points[], int size, Point target) {\n    Point closest = points[0];\n    int minDist = (points[0].x - target.x) * (points[0].x - target.x) + \n                   (points[0].y - target.y) * (points[0].y - target.y);\n    \n    for (int i = 1; i < size; i++) {\n        int dist = (points[i].x - target.x) * (points[i].x - target.x) + \n                   (points[i].y - target.y) * (points[i].y - target.y);\n        if (dist < minDist) {\n            minDist = dist;\n            closest = points[i];\n        }\n    }\n    return closest;\n}",
        "language": "c"
      }
    },
    {
      "id": 2,
      "title": "Game Character Stats",
      "topic": "structs",
      "difficulty": "medium",
      "points": 45,
      "description": "Create a Character struct with health, attack, and defense. Write a function battle that takes two characters and returns the winner after they fight (characters take turns attacking).",
      "structDefinition": {
        "code": "typedef struct {\n    char name[50];\n    int health;\n    int attack;\n    int defense;\n} Character;\n\nCharacter battle(Character fighter1, Character fighter2);",
        "language": "c"
      },
      "examples": [
        {
          "input": "Fighter1: \"Knight\", HP:100, ATK:25, DEF:10\nFighter2: \"Wizard\", HP:80, ATK:35, DEF:5",
          "output": "Winner: Knight\nRemaining HP: 20",
          "explanation": "Knight wins with 20 HP remaining after the battle"
        }
      ],
      "hints": [
        "Damage = Attacker's ATK - Defender's DEF (minimum 1). Alternate turns until one reaches 0 HP. Return the winner with updated health!"
      ],
      "solution": {
        "code": "Character battle(Character fighter1, Character fighter2) {\n    // Make copies to avoid modifying originals\n    Character f1 = fighter1;\n    Character f2 = fighter2;\n    \n    while (f1.health > 0 && f2.health > 0) {\n        // Fighter1 attacks Fighter2\n        int damage = f1.attack - f2.defense;\n        if (damage < 1) damage = 1;\n        f2.health -= damage;\n        \n        if (f2.health <= 0) break;\n        \n        // Fighter2 attacks Fighter1\n        damage = f2.attack - f1.defense;\n        if (damage < 1) damage = 1;\n        f1.health -= damage;\n    }\n    \n    return (f1.health > 0) ? f1 : f2;\n}",
        "language": "c"
      }
    },
    {
      "id": 3,
      "title": "Rectangle Collision",
      "topic": "structs",
      "difficulty": "hard",
      "points": 60,
      "description": "Create a Rectangle struct and a CollisionResult struct. Write a function that checks if two rectangles collide and returns detailed collision information including overlap area and direction.",
      "structDefinition": {
        "code": "typedef struct {\n    int x, y;      // Top-left corner\n    int width, height;\n} Rectangle;\n\ntypedef struct {\n    bool collides;\n    int overlapArea;\n    Rectangle overlapRect;\n} CollisionResult;\n\nCollisionResult checkCollision(Rectangle rect1, Rectangle rect2);",
        "language": "c"
      },
      "examples": [
        {
          "input": "Rect1: x:10, y:10, w:30, h:20\nRect2: x:25, y:15, w:20, h:25",
          "output": "Collides: Yes\nOverlap Area: 225\nOverlap Rect: x:25, y:15, w:15, h:15",
          "explanation": "Rectangles overlap with an area of 225 square units"
        }
      ],
      "hints": [
        "Two rectangles collide if: rect1.x < rect2.x + rect2.width AND rect1.x + rect1.width > rect2.x (same for y-axis). The overlap rectangle's coordinates are the maximum of the left/top edges and minimum of the right/bottom edges."
      ],
      "solution": {
        "code": "CollisionResult checkCollision(Rectangle rect1, Rectangle rect2) {\n    CollisionResult result = {false, 0, {0, 0, 0, 0}};\n    \n    // Check if rectangles collide\n    if (rect1.x < rect2.x + rect2.width &&\n        rect1.x + rect1.width > rect2.x &&\n        rect1.y < rect2.y + rect2.height &&\n        rect1.y + rect1.height > rect2.y) {\n        \n        result.collides = true;\n        \n        // Calculate overlap rectangle\n        result.overlapRect.x = (rect1.x > rect2.x) ? rect1.x : rect2.x;\n        result.overlapRect.y = (rect1.y > rect2.y) ? rect1.y : rect2.y;\n        \n        int right = (rect1.x + rect1.width < rect2.x + rect2.width) ? \n                    rect1.x + rect1.width : rect2.x + rect2.width;\n        int bottom = (rect1.y + rect1.height < rect2.y + rect2.height) ? \n                     rect1.y + rect1.height : rect2.y + rect2.height;\n        \n        result.overlapRect.width = right - result.overlapRect.x;\n        result.overlapRect.height = bottom - result.overlapRect.y;\n        \n        result.overlapArea = result.overlapRect.width * result.overlapRect.height;\n    }\n    \n    return result;\n}",
        "language": "c"
      }
    }
  ]
}